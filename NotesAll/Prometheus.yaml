Prometheus Alerting and Monitoring:

Horizantal Pod AutoScaler:
    based on the cpu utilization ,memory utilization , network utilization
Ingress Controller:
    Classic Load Balancer and Application Load Balancer
    Application Load Balancer is Layer 7 Type

ArgoCd:

First Expose it to load Balancer

Then get the password:
    fAMxXfZxFOJZJpRM
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

Monitoring Application Metrics is More Important
Application Metrics and Cluster Metrics

1: JVM Metrics
2: Application Metrics (Logs,Variables)
3: Cluster Metrics
4: Log Metrics
5: CPU Usage
6: Memory Usage
7: Requests per minute and bytes per request
8: Latency and uptime
9: Security exposure
10: User satisfaction/Apdex scores
11: Average response time
12: Error rates
13: Garbage collection
14: Request rates

https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/

Synchronizing state of grafana-server.service with SysV service script w/lib/systemd/systemd-sysv-install.


Executing: /usr/lib/systemd/systemd-sysv-install enable grafana-server


Created symlink /etc/systemd/system/multi-user.target.wants/grafana-servce â†’


/usr/lib/systemd/system/grafana-server.service.
---------------------------------------------------
Prometheus:
Open-Source systems monitoring and alerting toolkit with an active ecosystem
    1: Analyse How your aplications and Infrastructure are performing from teh Metrics
    2: Prometheus Components are written in Go Language
    3: Uses MultiDimensional data model with time series data identified by metric name and key value pairs Eg :.. https_request_total{method =
    "get"}
    4: Out Of Box features : PromQL (Read-Only)
        Flexible Query Language
---------------------------------------------------
Installation of Prometheus:
    1: minikube start
    2: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    3: helm install prometheus prometheus-community/prometheus
    4: kubectl expose service prometheus-server --type=NodePort --target-port=9090 --name=prometheus-server-np
    5: kubectl get svc
    6: minikube service prometheus-server-np --url
---------------------------------------------------
Installation of Graphana:
    1: helm repo add grafana https://grafana.github.io/helm-charts

    2: helm install grafana grafana/grafana
    3: kubectl expose service grafana --type=NodePort --target-port=3000 --name=grafana-np
    4: kubectl get services
    5: kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
    6: minikube service grafana-np --url
iWq85TabHyxklbPV1YbFdHRrd07gpL0tRcZyKJN2
---------------------------------------------------
Prometheus-Notes:
   Collect Listen for events,typically with timestamp
   Effectively Store Those events in storage
   Should support querying feature
   Provide a Graphical Monitoring

Data Model
Stores Metrics in key-value pairs
Storage
---------------------------------------------------
Basics Terminologies of Prometheus:

Monotoring:
Monitoring is a systematic process of collecting and recording the activities taking palce in a target project, programmeor service and then using that record values to chek if the targets are reaching their objectives or not

Alerting:
An alert is the outcome of an alerting rule in prometheus that is actively firing
Alerts are sent from prometheus to teh alert manager

Alert Manager:
Prometheus-Server --> Alert-Manager --> Email,PagerDuty,Slack

Alert Manager manages the alerts from Prometheus-Server aggregate them into groups,de-duplicates,applie silences,throttels,and sends out the notifications to email,pagerDuty,Slack

Target:
Obeject to scrape
Its is a machine
whose metrics are to be monitored

Instance:
end point scrape

Job :
job is a collection of targets/instances with same purpose

Sample:
A sample is a single value at a point in timein timeseries

Architecture Of Prometheus: See Pic in Google
---------------------------------------------
Prometheus-Server
Alert-Manager
Promethus-WebUI
PushGateway
Grafana
Pull Metrics
Short-Lived Jobs
Service Discovery

http://127.0.0.1:56946   --> Prometheus
http://127.0.0.1:59441   --> Grafana

==================================================

Prometheus Confirguration file: Pometheus.yaml
--------------------------------------------------
global:
    scare_interval: 15s
    evaluation_interval: 15s
alerting:
    alertManagers:
    - static_configs:
      - targets:
rule_files:

scrape_configs:
  - job_name: 'promethues'
    static_configs:
    - targets: ["locallhost:9090"]
--------------------------------------------------
What are Exporters:


